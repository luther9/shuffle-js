#!/usr/bin/env node

'use strict'

/*
A list is defined as either undefined or a 2-element Array where [1] is another
list.
*/

/*
  Return an iterator for the linked list.
*/
function* listIter(list) {
  while (list) {
    yield list[0]
    list = list[1]
  }
}

/*
Similar to Array.prototype.map, but for iterators.
*/
function* map(iter, func) {
  for (const item of iter) {
    yield func(item)
  }
}

/*
  Yield n items from iter. If iterator runs out of items, yield undefined.
*/
function* islice(iter, n) {
  for (let i = 0; i < n; ++i) {
    yield iter.next().value
  }
}

/*
Show all items in a string surrounded by parentheses.
*/
function iterToString(iter) {
  let str = '('
  let first = true
  for (const item of iter) {
    if (first) {
      first = false
    } else {
      str += ' '
    }
    str += item
  }
  return str + ')'
}

/*
Yield numbers from 0 to infinity.
*/
function* count() {
  for (let i = 0;; ++i) {
    yield i
  }
}

/*
Yield numbers in the range [0,n).
*/
function range(n) {
  return islice(count(), n)
}

// Yield numbers in [0,n) in a random order.
function* randomIntStream(n) {
  let pool = [...range(n)]
  while (pool.length) {
    const i = Math.floor(Math.random() * pool.length)
    yield pool[i]
    pool = pool.slice(0, i).concat(pool.slice(i + 1))
  }
}

/*
A Streak represents a sequence of consecutive integers. In this program, it
represents a sequence of cards which we will not split further.
*/
function Streak(min, size=1) {
  return {min, size}
}

const StreakArrayProto = {
  /*
  The lowest integer in the StreakArray.
  */
  get min() {
    return Math.min(...this.data.map(x => x.min))
  },

  /*
  The sum of the sizes of all the streaks.
  */
  get size() {
    return this.data.map(x => x.size).reduce((a, b) => a + b)
  },

  /*
  The raw length of the array. If it equals 1, this card pile is considered
  shuffled.
  */
  get length() {
    return this.data.length
  },

  /*
  The median of the numbers represented by the StreakArray.
  */
  get median() {
    return this.min + this.size / 2
  },

  /*
  Return the concatenation of this StreakArray with the arguments, which must be
  StreakArray objects. Consolodate the boundry streaks, if necessary.
  */
  concat(...arrays) {
    const result = this
    while (arrays.length) {
      const current = arrays[0]
      if (!result.length) {
	result = current
      } else if (current.length) {
	const lastI = result.length - 1
	const last = result.data[lastI]
	const next = current.data[0]
	return {
	  __proto__: StreakArrayProto,
	  data: last.min + last.size === next.min
	    ? this.data.slice(0, lastI)
	    .concat(
	      Streak(last.min, last.size + next.size), current.data.slice(1))
	    : this.data.concat(current.data),
	}
      }
      arrays = arrays.slice(1)
    }
    return result
  },

  get(i) {
    return this.data[i]
  },

  slice(begin, end) {
    return {
      __proto__: StreakArrayProto,
      data: this.data.slice(begin, end),
    }
  },
}

/*
iter is an iterable of integers.
*/
function StreakArray(iter) {
  let data
  for (const n of iter) {
    if (data) {
      const lastIndex = data.length - 1
      const current = data[lastIndex]
      data = n === current.min + current.size
	? data.slice(0, lastIndex).concat(Streak(current.min, current.size + 1))
	: data.concat(Streak(n))
    } else {
      data = [Streak(n)]
    }
  }
  return {
    __proto__: StreakArrayProto,
    data: data || [],
  }
}

function deck(uniques, identicals) {
  const pool = randomIntStream(uniques + identicals.reduce((a, b) => a + b, 0))
  let d = [...islice(pool, uniques)]
  for (const n of identicals) {
    const more = [...islice(pool, n)]
    more.sort((a, b) => a - b)
    d = more.concat(d)
  }
  return StreakArray(d)
}

/*
Return the letter of the pile that the streak at index i needs to go to.
*/
function getTarget(pile, i, median) {
  const streak = pile.get(i)
  const min = streak.min
  return min + streak.size - median <= median - min
    ? 'B' : 'A'
}

/*
Calculate the length of the prefix of hand whose streaks all belong to the same
target pile. Return the target pile letter and the length of that prefix.
*/
function getTransferData(hand, median) {
  const nextPile = getTarget(hand, 0, median)
  let i = 0
  for (; i < hand.length && getTarget(hand, i, median) === nextPile; ++i) {}
  return [nextPile, i]
}

function shuffle(state) {
  const hand = state.hand
  const piles = state.piles
  const median = state.median
  if (hand) {
    const newPiles = state.newPiles
    if (hand.length) {
      const [nextPile, end] = getTransferData(hand, median)
      const transfer = hand.slice(0, end)
      process.stdout.write(`${transfer.size} to ${nextPile}`)
      const isA = nextPile === 'A'
      return {
	piles, median,
	hand: hand.slice(end),
	newPiles: {
	  A: isA ? transfer.concat(newPiles.A) : newPiles.A,
	  B: isA ? newPiles.B : transfer.concat(newPiles.B),
	},
      }
    }
    return shuffle({piles: [newPiles.A, [newPiles.B, piles]]})
  }
  if (piles) {
    const hand = piles[0]
    if (hand.length === 1) {
      console.log(`Pile of ${hand.size} cards is already shuffled.`,)
      return shuffle({piles: piles[1]})
    }
    console.log(iterToString(map(listIter(piles), p => p.size)))
    return shuffle(
      {
	piles: piles[1],
	hand,
	median: hand.median,
	newPiles: {A: StreakArray([]), B: StreakArray([])},
      },
    )
  }
  process.exit()
}

{
  const argv = process.argv.slice(2).map(Number)

  // The state may have piles, hand, median, and newPiles.
  let state = shuffle({piles: [deck(argv[0], argv.slice(1))]})

  process.stdin.on(
    'close',
    () => {
      process.stdout.write('\n')
      process.exit()
    },
  )

  process.stdin.on(
    'readable',
    function() {
      if (this.read()) {
	state = shuffle(state)
      }
    },
  )
}
